/*********************************************************************
    Library: OLED_SSD1306.cpp
    Description:
        This is a lightweight port of the Adafruit SSD1306 library,
        designed to run on the Axoloti platform.

        Design focus is on small code footprint and limited, local dependencies

    Herstory:
        2017-05-24  Initial Port

*/

/*********************************************************************
This is a library for our Monochrome OLEDs based on SSD1306 drivers

  Pick one up today in the adafruit shop!
  ------> http://www.adafruit.com/category/63_98

These displays use SPI to communicate, 4 or 5 pins are required to
interface

Adafruit invests time and resources providing this open source code,
please support Adafruit and open-source hardware by purchasing
products from Adafruit!

Written by Limor Fried/Ladyada  for Adafruit Industries.
BSD license, check license.txt for more information
All text above, and the splash screen below must be included in any redistribution
*********************************************************************/

// Address of 0x3C when viewing 7 bit address, and 0x78 when in 8bit viewing

#include "font_press_play.h"

#define OLED_SSD1306_DISPLAYOFF          0xAE
#define OLED_SSD1306_SETDISPLAYCLOCKDIV  0xD5
#define OLED_SSD1306_SETMULTIPLEX        0xA8
#define OLED_SSD1306_LCDWIDTH            128
#define OLED_SSD1306_LCDHEIGHT           32
#define OLED_SSD1306_SETDISPLAYOFFSET    0xD3
#define OLED_SSD1306_SETSTARTLINE        0x40
#define OLED_SSD1306_CHARGEPUMP          0x8D
#define OLED_SSD1306_EXTERNALVCC         0x1
#define OLED_SSD1306_SWITCHCAPVCC        0x2
#define OLED_SSD1306_MEMORYMODE          0x20
#define OLED_SSD1306_SEGREMAP            0xA0
#define OLED_SSD1306_COMSCANDEC          0xC8
#define OLED_SSD1306_SETCOMPINS          0xDA
#define OLED_SSD1306_SETCONTRAST         0x81
#define OLED_SSD1306_SETPRECHARGE        0xD9
#define OLED_SSD1306_SETVCOMDETECT       0xDB
#define OLED_SSD1306_DISPLAYALLON_RESUME 0xA4
#define OLED_SSD1306_NORMALDISPLAY       0xA6
#define OLED_SSD1306_DEACTIVATE_SCROLL   0x2E
#define OLED_SSD1306_DISPLAYON           0xAF
#define OLED_SSD1306_COLUMNADDR          0x21
#define OLED_SSD1306_PAGEADDR            0x22


struct OLED_Struct
{
    int8_t _i2caddr, _vccstate;
};

OLED_Struct OLED0;


#define OLED_BUFF_SIZE 512 // (LCD height 32 * LCD Width 128 )/8 == 32*128/8 = 512 // Each byte contains a single pixel
#define CARTESIAN_BYTE_ARRAY_NUM_COLS 16 // 128 bits / 8 bits per byte
#define CARTESIAN_BYTE_ARRAY_NUM_ROWS 32 // 32 rows of 16 bytes

/*
// Contains default Adafruit splash logo, as per license
uint8_t OLEDBuffer[OLED_BUFF_SIZE] =
{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
    0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x80, 0x80, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xF8, 0xE0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80,
    0x80, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0xFF,
}; */

uint8_t Cartesian_Byte_Array[CARTESIAN_BYTE_ARRAY_NUM_ROWS][CARTESIAN_BYTE_ARRAY_NUM_COLS] =
{

    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },

    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },

    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },

    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};


uint8_t Cartesian_Byte_Array_Checkerboard[CARTESIAN_BYTE_ARRAY_NUM_ROWS][CARTESIAN_BYTE_ARRAY_NUM_COLS] =
{
    { 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55 },
    { 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
    { 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55 },
    { 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
    { 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55 },
    { 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
    { 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55 },
    { 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },

    { 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55 },
    { 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
    { 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55 },
    { 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
    { 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55 },
    { 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
    { 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55 },
    { 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },

    { 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55 },
    { 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
    { 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55 },
    { 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
    { 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55 },
    { 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
    { 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55 },
    { 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },

    { 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55 },
    { 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
    { 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55 },
    { 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
    { 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55 },
    { 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
    { 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55 },
    { 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA },
};

void setPixel(uint8_t x, uint8_t y, bool bPixelOn)
{
    uint8_t pixelMask = 0b10000000 >> (x%8);

    if (bPixelOn){ Cartesian_Byte_Array[y][x/8] |= pixelMask; } else { Cartesian_Byte_Array[y][x/8] &= ~pixelMask;}
}

/*{
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },

    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },

    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },

    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};*/



uint8_t OLEDBuffer[OLED_BUFF_SIZE] =
{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


void ConvertCartesianBufferToOLEDBuffer()
{
        uint8_t searchMask = 0b10000000;
        uint8_t writeMask  = 0b00000001;
        uint8_t invertedMask;
        uint32_t buffIndex;
        invertedMask = ~writeMask;

        int y=0;
        int x=0;
        int xOrigin = x;
        int yOrigin = y;

        writeMask  = 0b00000001;
        for (uint8_t iCartesianRow = 0; iCartesianRow < 32; iCartesianRow++)
        {
            if (iCartesianRow == 0) {yOrigin=0;}
            if (iCartesianRow == 8) {yOrigin=8;}
            if (iCartesianRow == 16) {yOrigin=16;}
            if (iCartesianRow == 24) {yOrigin=24;}

            for( uint8_t iCartesianColumn=0; iCartesianColumn < 16; iCartesianColumn++)
            {
                invertedMask = ~writeMask;
                searchMask = 0b10000000;
                for (int bit=0; bit<8; bit++)
                {
                    buffIndex = xOrigin+yOrigin*16+bit+8*iCartesianColumn;
                    if (Cartesian_Byte_Array[iCartesianRow][iCartesianColumn] & searchMask) { OLEDBuffer[buffIndex] |= writeMask; } else { OLEDBuffer[buffIndex] &= invertedMask; }
                    searchMask = searchMask >> 1;
                }
            }
            if (writeMask == 0b10000000) {writeMask = 0x01;} else {writeMask = writeMask << 1;}




        }

/*
        xOrigin = x;
        yOrigin = 8;
        writeMask  = 0b00000001;
        for (uint8_t iCartesianRow = 0; iCartesianRow < 8; iCartesianRow++)
        {
            for( uint8_t iCartesianColumn=0; iCartesianColumn < 16; iCartesianColumn++)
            {
                invertedMask = ~writeMask;
                searchMask = 0b10000000;
                for (int bit=0; bit<8; bit++)
                {
                    buffIndex = xOrigin+yOrigin*16+bit+8*iCartesianColumn;
                    if (Cartesian_Byte_Array[iCartesianRow][iCartesianColumn] & searchMask) { OLEDBuffer[buffIndex] |= writeMask; } else { OLEDBuffer[buffIndex] &= invertedMask; }
                    searchMask = searchMask >> 1;
                }
            }
            if (writeMask == 0b10000000) {writeMask = 0x01;} else {writeMask = writeMask << 1;}
        }
*/

/*
        for (int bit=0; bit<8; bit++)
        {
            if (Cartesian_Byte_Array[y][x] & searchMask) { OLEDBuffer[xOrigin+yOrigin*16+bit ] |= writeMask; } else { OLEDBuffer[xOrigin+yOrigin*16+bit ] &= invertedMask; }
            searchMask = searchMask >> 1;
        }


        y=0;
        x=1;
        searchMask = 0b10000000;
        for (int bit=0; bit<8; bit++)
        {
            if (Cartesian_Byte_Array[y][x] & searchMask) { OLEDBuffer[xOrigin+yOrigin*16+bit+8 ] |= writeMask; } else { OLEDBuffer[xOrigin+yOrigin*16+bit+8 ] &= invertedMask; }
            searchMask = searchMask >> 1;
        }

        */
}

/*
void ConvertCartesianBufferToOLEDBuffer()
{
        uint8_t searchMask = 0b10000000;
        uint8_t writeMask  = 0b00000001;
        uint8_t invertedMask;
        invertedMask = ~writeMask;

        int y=0;
        int x=0;
        int xOrigin = x;
        int yOrigin = y;

        for (int bit=0; bit<8; bit++)
        {
            if (Cartesian_Byte_Array[y][x] & searchMask) { OLEDBuffer[xOrigin+yOrigin*16+bit ] |= writeMask; } else { OLEDBuffer[xOrigin+yOrigin*16+bit ] &= invertedMask; }
            searchMask = searchMask >> 1;
        }


        y=0;
        x=1;
        writeMask = writeMask << 1;
        invertedMask = ~writeMask;
        for (int bit=0; bit<8; bit++)
        {
            if (Cartesian_Byte_Array[y][x] & searchMask) { OLEDBuffer[xOrigin+yOrigin*16+bit ] |= writeMask; } else { OLEDBuffer[xOrigin+yOrigin*16+bit ] &= invertedMask; }
            searchMask = searchMask >> 1;
        }
}
*/

/*
void ConvertCartesianBufferToOLEDBuffer()
{
        uint8_t writeMask  = 0b00000001;
        uint8_t invertedMask;

        int y=0;
        int x=0;
        for ( int iByteSource=0; iByteSource < 8; iByteSource++)
        {
            uint8_t searchMask = 0b10000000;
            invertedMask = ~writeMask;
            for( int iBit=0; iBit<8; iBit++)
            {
                if (Cartesian_Byte_Array[y][x + iByteSource] & searchMask) { OLEDBuffer[ x+y*16+iBit] |= writeMask; } else { OLEDBuffer[ x+y*16+iBit ] &= invertedMask; }
            }
            searchMask = searchMask << 1;
        }
}*/

/*
void ConvertCartesianBufferToOLEDBuffer()
{
    for (int y=0; y < CARTESIAN_BYTE_ARRAY_NUM_ROWS; y++)
    {

        uint8_t writeMask  = 0b00000001;
        uint8_t invertedMask;
        for (int x=0; x < CARTESIAN_BYTE_ARRAY_NUM_COLS; x++)
        {
            uint8_t searchMask = 0b10000000;
            invertedMask = ~writeMask;

            for (uint8_t bit=0; bit < 8; bit++)
            {
                if (Cartesian_Byte_Array[y][x] & searchMask) { OLEDBuffer[ x+y*16+bit ] |= writeMask; } else { OLEDBuffer[ x+y*16+bit ] &= invertedMask; }
                searchMask = searchMask >> 1;
            }

            if (writeMask == 0b10000000) { writeMask = 0b00000001 } else { writeMask = writeMask << 1; }

        }
    }
}
*/




void SetOLEDChar(uint8_t x, uint8_t y, uint8_t setChar)
{
    uint8_t charOffset=0;
    uint8_t startX, startY;

    if      (charOffset == 'A') charOffset = 0;
    else if (charOffset == 'B') charOffset = 1;
    else                        charOffset = 3;

    switch( setChar )
    {
        case 'A':
            charOffset = 0;
            break;
        case 'B':
            charOffset = 1;
        default:
            charOffset = 1;
            break;
    }

    startX = x *16;
    startY = y *4;



/*
    Cartesian_Byte_Array[0][0] = fontPressPlay[ 0 ][ 0 ];
    Cartesian_Byte_Array[1][0] = fontPressPlay[ 0 ][ 1 ];
    Cartesian_Byte_Array[2][0] = fontPressPlay[ 0 ][ 2 ];
    Cartesian_Byte_Array[3][0] = fontPressPlay[ 0 ][ 3 ];
    Cartesian_Byte_Array[4][0] = fontPressPlay[ 0 ][ 4 ];
    Cartesian_Byte_Array[5][0] = fontPressPlay[ 0 ][ 5 ];
    Cartesian_Byte_Array[6][0] = fontPressPlay[ 0 ][ 6 ];
    Cartesian_Byte_Array[7][0] = fontPressPlay[ 0 ][ 7 ];
*/


    for (int iPixelY = 0; iPixelY < 8; iPixelY++)
    {
        Cartesian_Byte_Array[ startY+iPixelY ][ x ] = fontPressPlay[ charOffset ][ iPixelY ];
    }

    ConvertCartesianBufferToOLEDBuffer();

}


void OLED_Sandbox()
{

    SetOLEDChar(0, 0, 'A');
    SetOLEDChar(1, 0, 'B');
    SetOLEDChar(2, 0, 'B');
    SetOLEDChar(3, 0, 'A');
/*
    for (int iRow=0; iRow < 32; iRow++)
    {
        for (int iCol=0; iCol < 128; iCol++)
        {
            setPixel(iCol,iRow, true);
            ConvertCartesianBufferToOLEDBuffer();
            OLEDDisplay();
            setPixel(iCol,iRow, false);
            chThdSleepMilliseconds(10);

        }
    }
*/

}



struct I2CMessage
{
	msg_t status;
	uint32_t result;
};


void OLEDClearDisplay()
{
    memset(OLEDBuffer, 0, (OLED_SSD1306_LCDWIDTH*OLED_SSD1306_LCDHEIGHT/8));
}

void OLED1306_command(uint8_t c)
{
    I2CMessage thisMsg;
	thisMsg.status = RDY_OK;
	txbuf[0] = 0;
    txbuf[1] = c;

	//thisMsg.status = i2cMasterTransmitTimeout(&I2CD1, OLED0._i2caddr, txbuf, 0, rxbuf, 0, tmo); // <TBD add status checking>
    thisMsg.status = i2cMasterTransmitTimeout(&I2CD1, OLED0._i2caddr, txbuf, 2, rxbuf, 0, tmo); // <TBD add status checking>
    chThdSleepMilliseconds(1);
	//return(thisMsg);
}




void OLEDBegin(uint8_t vccstate, uint8_t i2caddr, bool reset)
{
  OLED0._vccstate = vccstate;
  OLED0._i2caddr = i2caddr;

  // Init sequence
  OLED1306_command(OLED_SSD1306_DISPLAYOFF);                    // 0xAE
  OLED1306_command(OLED_SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
  OLED1306_command(0x80);                                  // the suggested ratio 0x80

  OLED1306_command(OLED_SSD1306_SETMULTIPLEX);                  // 0xA8
  OLED1306_command(OLED_SSD1306_LCDHEIGHT - 1);

  OLED1306_command(OLED_SSD1306_SETDISPLAYOFFSET);              // 0xD3
  OLED1306_command(0x0);                                   // no offset
  OLED1306_command(OLED_SSD1306_SETSTARTLINE | 0x0);            // line #0
  OLED1306_command(OLED_SSD1306_CHARGEPUMP);                    // 0x8D
  if (vccstate == OLED_SSD1306_EXTERNALVCC)
    { OLED1306_command(0x10); }
  else
    { OLED1306_command(0x14); }
  OLED1306_command(OLED_SSD1306_MEMORYMODE);                    // 0x20
  OLED1306_command(0x00);                                  // 0x0 act like ks0108
  OLED1306_command(OLED_SSD1306_SEGREMAP | 0x1);
  OLED1306_command(OLED_SSD1306_COMSCANDEC);

  // #if defined SSD1306_128_32
  OLED1306_command(OLED_SSD1306_SETCOMPINS);                    // 0xDA
  OLED1306_command(0x02);
  OLED1306_command(OLED_SSD1306_SETCONTRAST);                   // 0x81
  OLED1306_command(0x8F);



  OLED1306_command(OLED_SSD1306_SETPRECHARGE);                  // 0xd9
  if (vccstate == OLED_SSD1306_EXTERNALVCC)
    { OLED1306_command(0x22); }
  else
    { OLED1306_command(0xF1); }
  OLED1306_command(OLED_SSD1306_SETVCOMDETECT);                 // 0xDB
  OLED1306_command(0x40);
  OLED1306_command(OLED_SSD1306_DISPLAYALLON_RESUME);           // 0xA4
  OLED1306_command(OLED_SSD1306_NORMALDISPLAY);                 // 0xA6

  OLED1306_command(OLED_SSD1306_DEACTIVATE_SCROLL);

  OLED1306_command(OLED_SSD1306_DISPLAYON);//--turn on oled panel

  //ConvertCartesianBufferToOLEDBuffer();
}

void OLEDDisplay()
{
  OLED1306_command(OLED_SSD1306_COLUMNADDR);
  OLED1306_command(0);   // Column start address (0 = reset)
  OLED1306_command(OLED_SSD1306_LCDWIDTH-1); // Column end address (127 = reset)

  OLED1306_command(OLED_SSD1306_PAGEADDR);
  OLED1306_command(0); // Page start address (0 = reset)
  #if OLED_SSD1306_LCDHEIGHT == 64
    OLED1306_command(7); // Page end address
  #endif
  #if OLED_SSD1306_LCDHEIGHT == 32
    OLED1306_command(3); // Page end address
  #endif
  #if OLED_SSD1306_LCDHEIGHT == 16
    OLED1306_command(1); // Page end address
  #endif

#ifdef TWBR
    uint8_t twbrbackup = TWBR;  // DDL, not sure if this is necessary
    TWBR = 12; // upgrade to 400KHz!
#endif

    chThdSleepMilliseconds(10);
    // I2C
    I2CMessage thisMsg;
    #define I2C_BYTES_PER_XFER 8
    for (uint16_t i=0; i<(OLED_SSD1306_LCDWIDTH*OLED_SSD1306_LCDHEIGHT/8); i+=I2C_BYTES_PER_XFER)
    {
      txbuf[0] = 0x40;

      for (int ix=0; ix < I2C_BYTES_PER_XFER; ix++)
      {
          txbuf[ix+1] = OLEDBuffer[i+ix];
      }

      thisMsg.status = i2cMasterTransmitTimeout(&I2CD1, OLED0._i2caddr, txbuf, I2C_BYTES_PER_XFER+1, rxbuf, 0, tmo); // <TBD add status checking>
      chThdSleepMilliseconds(1);
    }

    #ifdef TWBR
        TWBR = twbrbackup;
    #endif

}
