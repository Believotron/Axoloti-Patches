<patch-1.0 appVersion="1.0.12">
   <comment type="patch/comment" x="14" y="14" text="demonstrates the use of hardware serial I/O. Connect PA2 to PA3 to create a loopback test."/>
   <obj type="gpio/serial/config" uuid="8ec617bbe7b552a58656442e87513d8b4c69833a" name="serial.begin_1" x="14" y="42">
      <params/>
      <attribs>
         <combo attributeName="baudrate" selection="9600"/>
      </attribs>
   </obj>
   <comment type="patch/comment" x="14" y="112" text="transmission/reception of serial data is done in a script2 object"/>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="c_1" x="14" y="140">
      <params>
         <frac32.u.map name="value" value="63.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="OLED/OLED_Parser" uuid="d455c788-2a8a-4096-85d1-2e1302ed60e6" name="OLED_Parser_1" x="238" y="140">
      <params/>
      <attribs>
         <text attributeName="script">
            <sText><![CDATA[// demo serial transmission and reception using SD2 (USART2)

#define UARTWriteByte( a ) (sdPut(&SD2,a))

void writeLine( char * chBuff, uint8_t iLength)
{
	UARTWriteByte('{');
	UARTWriteByte('W');
	UARTWriteByte('L');
	UARTWriteByte(',');
	UARTWriteByte('3');
	UARTWriteByte(',');
	UARTWriteByte('3');
	UARTWriteByte(',');
	UARTWriteByte('1');
	UARTWriteByte(',');
	//UARTWriteByte('1');
	//UARTWriteByte('6');
	//UARTWriteByte(',');
	UARTWriteByte('"');
	
	
	for (int i=0; i<iLength; i++)
	{		
		UARTWriteByte( chBuff[i] );
		if (chBuff[i] == '\0') break;
	}

	UARTWriteByte('"');
	UARTWriteByte('}');	
	
}

union float2bytes { float f; char b[sizeof(float)]; };

void writeFloat(float fVal, int iDevice, int iRow, int iOffset, int iWidth)
{
	UARTWriteByte('{');
	UARTWriteByte('W');
	UARTWriteByte('F');
	UARTWriteByte(',');
	UARTWriteByte('1');
	UARTWriteByte(',');
	UARTWriteByte('0');
	UARTWriteByte(',');
	UARTWriteByte('0');
	UARTWriteByte(',');
	UARTWriteByte('9');
	UARTWriteByte(',');
	//UARTWriteByte(0);
	//UARTWriteByte(0);
	//UARTWriteByte(0);
	//UARTWriteByte(1);

	float2bytes f2b;
	f2b.f = fVal;

	UARTWriteByte( f2b.b[0] );
	UARTWriteByte( f2b.b[1] );
	UARTWriteByte( f2b.b[2] );
	UARTWriteByte( f2b.b[3] );		
	UARTWriteByte('}');	
}


void writeInt(int32_t i32Val, int iDevice, int iRow, int iOffset, int iWidth)
{
	UARTWriteByte('{');
	UARTWriteByte('W');
	UARTWriteByte('I');
	UARTWriteByte(',');
	UARTWriteByte('1');
	UARTWriteByte(',');
	UARTWriteByte('0');
	UARTWriteByte(',');
	UARTWriteByte('0');
	UARTWriteByte(',');
	UARTWriteByte('9');
	UARTWriteByte(',');
	//UARTWriteByte(0);
	//UARTWriteByte(0);
	//UARTWriteByte(0);
	//UARTWriteByte(1);

	UARTWriteByte( (char) ( (i32Val >> 24) & 0xFF ) );
	UARTWriteByte( (char) ( (i32Val >> 16) & 0xFF ) );
	UARTWriteByte( (char) ( (i32Val >>  8) & 0xFF ) );
	UARTWriteByte( (char) ( (i32Val      ) & 0xFF ) );		
	UARTWriteByte('}');	
}


void setup(void) {

	UARTWriteByte( 'A' );
	UARTWriteByte( 'B' );
	UARTWriteByte( 'C' );
	UARTWriteByte( 'D' );

	//writeLine("Proof of UART", 13);
	//writeInt(in1, 2, 1, 3, 8);
	
	
} 





void loop(void) {
	uint8_t foo;
	static uint8_t bLastVal=0;

	if (bLastVal == 0 && bTrig)
	{
		//writeInt(in1, 2, 1, 3, 8);		
		writeFloat(in1, 2, 1, 3, 8);		
	}

	bLastVal = bTrig;
	
	
	// send a single byte, value from in1
	//sdPut(&SD2, 'b'); 
	//sdPut(&SD2, in1>>21); 
	//UARTWriteByte( 'A' );
	//UARTWriteByte( 'B' );

	//char cBuff[16] = "Them apples";

	//writeLine(cBuff, strlen(cBuff) );

	// read all pending bytes, value to out1
	while(!sdGetWouldBlock(&SD2)){
		out1 = sdGet(&SD2)<<21;
	}
	chThdSleepMilliseconds(3);
}]]></sText>
         </text>
      </attribs>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="displayU_1" x="476" y="140">
      <params/>
      <attribs/>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_1" x="98" y="168">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <nets>
      <net>
         <source obj="c_1" outlet="out"/>
         <dest obj="OLED_Parser_1" inlet="in1_"/>
      </net>
      <net>
         <source obj="button_1" outlet="o"/>
         <dest obj="OLED_Parser_1" inlet="trig_"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>114</x>
      <y>523</y>
      <width>1150</width>
      <height>506</height>
   </windowPos>
</patch-1.0>