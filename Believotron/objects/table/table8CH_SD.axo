<objdefs appVersion="1.0.12">
   <obj.normal id="table8CH_SD" uuid="b63e44c0-705f-4b46-bc43-7deac444bd05">
      <sDescription>writes and outputs 8 values to a table.</sDescription>
      <author>robert schirmer</author>
      <license>who cares</license>
      <inlets>
         <frac32 name="v0"/>
         <frac32 name="v1"/>
         <frac32 name="v2"/>
         <frac32 name="v3"/>
         <frac32 name="v4"/>
         <frac32 name="v5"/>
         <frac32 name="v6"/>
         <frac32 name="v7"/>
         <int32 name="offset" description="sets an offset for writing to the table"/>
         <int32 name="channelID"/>
         <int32 name="activeChannel"/>
      </inlets>
      <outlets>
         <frac32 name="v0"/>
         <frac32 name="v1"/>
         <frac32 name="v2"/>
         <frac32 name="v3"/>
         <frac32 name="v4"/>
         <frac32 name="v5"/>
         <frac32 name="v6"/>
         <frac32 name="v7"/>
      </outlets>
      <displays/>
      <params/>
      <attribs>
         <objref name="table"/>
      </attribs>
      <code.declaration><![CDATA[// Table 8
uint32_t prev0;
uint32_t prev1;
uint32_t prev2;
uint32_t prev3;
uint32_t prev4;
uint32_t prev5;
uint32_t prev6;
uint32_t prev7;

uint8_t bChannelActive;

uint8_t prevActiveChannel;]]></code.declaration>
      <code.init><![CDATA[// Table 8
prev0 = 0;
prev1 = 0;
prev2 = 0;
prev3 = 0;
prev4 = 0;
prev5 = 0;
prev6 = 0;
prev7 = 0;


prevActiveChannel=0;
bChannelActive = false;

/*

// Init tableReadWrite
ntrig = 0;
ptrig = 0;
pval = 0;
pIndex=0;
ntrigSave=0;
ntrigLoad=0;
channelTrig=0;
outletVal=0;

// Init string/doubleIndex
strcpy(&c[0],"attr_prefix00-000attr_suffix");
offset    = strlen("attr_prefix");
offset2   = offset + 3; // Added extra two zeroes
pvalIndex = 0;
pvalPage  = 0;

// Init table/alloc 16b sdram
static int16_t _array[attr_poly][LENGTH] __attribute__ ((section (".sdram")));
array = &_array[parent->polyIndex][0];
{ 
  int i;
  for(i=0;i<LENGTH;i++) array[i]=0;
}
// attr_init // Don't need the table init substitution

*/]]></code.init>
      <code.krate><![CDATA[// Table 8
if (inlet_activeChannel == inlet_channelID) 
{
	// If the channel is not active, 
	if (bChannelActive == false) 
	{ 
		// activate the channel
		bChannelActive = true; 

		// reset the previous state to the current input
		prev0 = inlet_v0;
		prev1 = inlet_v1;
		prev2 = inlet_v2;
		prev3 = inlet_v3;
		prev4 = inlet_v4;
		prev5 = inlet_v5;
		prev6 = inlet_v6;
		prev7 = inlet_v7;				
	} 
	else
	{	
		// Only triggers if knob is different after first loop
		
		if ((inlet_v0 != prev0)&& (bChannelActive))
		{	
			attr_table.array[inlet_offset + 0]=__SSAT(inlet_v0,28)>>attr_table.GAIN;	
			prev0 = inlet_v0;
		}		
		
		if ((inlet_v1 != prev1)&& (bChannelActive))
		{			
			attr_table.array[inlet_offset + 1]=__SSAT(inlet_v1,28)>>attr_table.GAIN;
			prev1 = inlet_v1;
		}		
		
		if ((inlet_v2 != prev2)&& (bChannelActive))
		{
			
			attr_table.array[inlet_offset + 2]=__SSAT(inlet_v2,28)>>attr_table.GAIN;
			prev2 = inlet_v2;
		}
		
		if ((inlet_v3 != prev3)&& (bChannelActive))
		{
			attr_table.array[inlet_offset + 3]=__SSAT(inlet_v3,28)>>attr_table.GAIN;
			prev3 = inlet_v3;
		}
		
		if ((inlet_v4 != prev4)&& (bChannelActive))
		{			
			attr_table.array[inlet_offset + 4]=__SSAT(inlet_v4,28)>>attr_table.GAIN;
			prev4 = inlet_v4;
		}		
		
		if ((inlet_v5 != prev5)&& (bChannelActive))
		{			
			attr_table.array[inlet_offset + 5]=__SSAT(inlet_v5,28)>>attr_table.GAIN;
			prev5 = inlet_v5;
		}		
		
		if ((inlet_v6 != prev6)&& (bChannelActive))
		{
			attr_table.array[inlet_offset + 6]=__SSAT(inlet_v6,28)>>attr_table.GAIN;
			prev6 = inlet_v6;
		}
				
		if ((inlet_v7 != prev7)&& (bChannelActive))
		{			
			attr_table.array[inlet_offset + 7]=__SSAT(inlet_v7,28)>>attr_table.GAIN;	
			prev7 = inlet_v7;
		}
	}
}
else // not the active channel
{
	// reset the active channel
	bChannelActive = false;
}

// Output whatever is in the table array
outlet_v0= attr_table.array[__USAT((inlet_offset + 0),attr_table.LENGTHPOW)]<<attr_table.GAIN;
outlet_v1= attr_table.array[__USAT((inlet_offset + 1),attr_table.LENGTHPOW)]<<attr_table.GAIN;
outlet_v2= attr_table.array[__USAT((inlet_offset + 2),attr_table.LENGTHPOW)]<<attr_table.GAIN;		
outlet_v3= attr_table.array[__USAT((inlet_offset + 3),attr_table.LENGTHPOW)]<<attr_table.GAIN;
outlet_v4= attr_table.array[__USAT((inlet_offset + 4),attr_table.LENGTHPOW)]<<attr_table.GAIN;
outlet_v5= attr_table.array[__USAT((inlet_offset + 5),attr_table.LENGTHPOW)]<<attr_table.GAIN;
outlet_v6= attr_table.array[__USAT((inlet_offset + 6),attr_table.LENGTHPOW)]<<attr_table.GAIN;		
outlet_v7= attr_table.array[__USAT((inlet_offset + 7),attr_table.LENGTHPOW)]<<attr_table.GAIN;



// </table 8>]]></code.krate>
   </obj.normal>
</objdefs>