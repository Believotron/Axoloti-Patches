<patch-1.0>
   <obj type="gpio/i2c/config" sha="1ea9db31ce7ec2874d2a8315213c733a6b3c2dcf" uuid="b095a33e56de5fcd23740a7d983bc0bafb315d81" name="i2c.begin_1" x="14" y="0">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="126" y="0" text="I2C init and read of cap touch pads MPR121"/>
   <obj type="disp/hex" sha="e21d1bcdfadc4f2009b547d002484bede0762978" uuid="87617898f70d90033f8add921438bf0d11721fdd" name="hex_1" x="252" y="28">
      <params/>
      <attribs/>
   </obj>
   <obj type="lfo/square" sha="b4420b58ca2ae5ece53d53540bc91bc9ed7a4b83" uuid="de6909eb64db13af5b43f979a4c130024b3a4793" name="square_1" x="14" y="42">
      <params>
         <frac32.s.map name="pitch" value="32.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="script/script2" sha="362a4413ceaefbe716480bf8f9c62eb3587fe6c0" uuid="d39e743cf47c9221f4e99c133430148cf74c68c5" name="script2_1" x="126" y="56">
      <params/>
      <attribs>
         <text attributeName="script">
            <sText><![CDATA[int cnt = 1;
bool gate = 1;
uint8_t *rxbuf;
uint8_t *txbuf;
systime_t tmo = MS2ST(4);

// The default I2C address
//#define MPR121_I2CADDR_DEFAULT 0x5A
#define MPR121_I2CADDR_DEFAULT 0x5C

#define MPR121_TOUCHSTATUS_L 0x00
#define MPR121_TOUCHSTATUS_H 0x01
#define MPR121_FILTDATA_0L  0x04
#define MPR121_FILTDATA_0H  0x05
#define MPR121_BASELINE_0   0x1E
#define MPR121_MHDR         0x2B
#define MPR121_NHDR         0x2C
#define MPR121_NCLR         0x2D
#define MPR121_FDLR         0x2E
#define MPR121_MHDF         0x2F
#define MPR121_NHDF         0x30
#define MPR121_NCLF         0x31
#define MPR121_FDLF         0x32
#define MPR121_NHDT         0x33
#define MPR121_NCLT         0x34
#define MPR121_FDLT         0x35

#define MPR121_TOUCHTH_0    0x41
#define MPR121_RELEASETH_0    0x42
#define MPR121_DEBOUNCE 0x5B
#define MPR121_CONFIG1 0x5C
#define MPR121_CONFIG2 0x5D
#define MPR121_CHARGECURR_0 0x5F
#define MPR121_CHARGETIME_1 0x6C
#define MPR121_ECR 0x5E
#define MPR121_AUTOCONFIG0 0x7B
#define MPR121_AUTOCONFIG1 0x7C
#define MPR121_UPLIMIT   0x7D
#define MPR121_LOWLIMIT  0x7E
#define MPR121_TARGETLIMIT  0x7F

#define MPR121_GPIODIR  0x76
#define MPR121_GPIOEN  0x77
#define MPR121_GPIOSET  0x78
#define MPR121_GPIOCLR  0x79
#define MPR121_GPIOTOGGLE  0x7A
#define MPR121_SOFTRESET 0x80


void LinkTxRxBuffers(void)
{
	static uint8_t _txbuf[8] __attribute__ ((section (".sram2")));
	static uint8_t _rxbuf[8] __attribute__ ((section (".sram2")));
	txbuf = _txbuf;
	rxbuf = _rxbuf;
}

/*
uint8_t ReadCap1188Reg(uint8_t ui8Register)
{
	msg_t status = RDY_OK;
	txbuf[0] = ui8Register;
	status = i2cMasterTransmitTimeout(&I2CD1, CAP1188_I2CADDR, txbuf, 1, rxbuf, 1, tmo); // TBD add status checking
	return rxbuf[0];
}


void WriteCap1188Reg(uint8_t ui8Register, uint8_t ui8Val)
{
	msg_t status = RDY_OK;
	txbuf[0] = ui8Register;
	txbuf[1] = ui8Val;
	status = i2cMasterTransmitTimeout(&I2CD1, CAP1188_I2CADDR, txbuf, 2, rxbuf, 0, tmo); // TBD add status checking
}
*/

void WriteMPR121Register(uint8_t ui8Register, uint8_t ui8Val)
{
	msg_t status = RDY_OK;
	txbuf[0] = ui8Register;
	txbuf[1] = ui8Val;
	status = i2cMasterTransmitTimeout(&I2CD1, MPR121_I2CADDR_DEFAULT, txbuf, 2, rxbuf, 0, tmo); // TBD add status checking
}

uint8_t ReadMPR121Register8(uint8_t ui8Register)
{
	msg_t status = RDY_OK;
	txbuf[0] = ui8Register;
	status = i2cMasterTransmitTimeout(&I2CD1, MPR121_I2CADDR_DEFAULT, txbuf, 1, rxbuf, 1, tmo); // TBD add status checking
	return rxbuf[0];
}

uint16_t ReadMPR121Register16(uint8_t ui8Register)
{
	uint16_t output;
	msg_t status = RDY_OK;
	txbuf[0] = ui8Register;
	status = i2cMasterTransmitTimeout(&I2CD1, MPR121_I2CADDR_DEFAULT, txbuf, 1, rxbuf, 2, tmo); // TBD add status checking
	return ( rxbuf[0] | ( rxbuf[1] << 8 ) );
	//return 0x0008;
}

void SetMPR121Threshold(uint8_t touch, uint8_t release)
{
	for (uint8_t i=0; i<12; i++) 
	{
		WriteMPR121Register(MPR121_TOUCHTH_0 + 2*i, touch);
		WriteMPR121Register(MPR121_RELEASETH_0 + 2*i, release);
	}
}

/*
uint32_t Cap1188Touched()
{
	uint8_t  t = ReadCap1188Reg(CAP1188_SENINPUTSTATUS);
	uint32_t ui32KeyVal = 0;//0x55555555; 
	if (t)
	{
		uint8_t ui8MainReg = ReadCap1188Reg(CAP1188_MAIN);
		WriteCap1188Reg(CAP1188_MAIN, ui8MainReg & ~CAP1188_MAIN_INT); // I think this resets the trigger alert
		
	}

	// t is the raw encoded value, one bit for each pin
	// I'm not sure what the final scheme is, so I'm kludging this:
	if      (0x01 & t) { ui32KeyVal = 0x00200000; }
	else if (0x02 & t) { ui32KeyVal = 0x00400000; }
	else if (0x04 & t) { ui32KeyVal = 0x00600000; }
	else if (0x08 & t) { ui32KeyVal = 0x00800000; }
	else if (0x10 & t) { ui32KeyVal = 0x00A00000; }
	else if (0x20 & t) { ui32KeyVal = 0x00C00000; }
	else if (0x40 & t) { ui32KeyVal = 0x00E00000; }
	else if (0x80 & t) { ui32KeyVal = 0x02000000; }
	else                 ui32KeyVal = 0x00000000;
	
	return (ui32KeyVal);
	//return(t);
}
*/

uint32_t MPR121Touched()
{
	//uint16_t capstatus = ReadMPR121Register16(MPR121_TOUCHSTATUS_L);
	//return ( capstatus & 0x0FFF );
	//return ReadMPR121Register8(MPR121_TOUCHSTATUS_L);

	uint32_t ui32NoteVal = 0;
	
	uint16_t u16capstatus = ReadMPR121Register16(MPR121_TOUCHSTATUS_L);
	// Monophonic. single scale, lazycode for proof
	if      ( (u16capstatus & 0x0001) == 0x0001) ui32NoteVal = 0xFF800000;
	else if ( (u16capstatus & 0x0002) == 0x0002) ui32NoteVal = 0xFFA00000;
	else if ( (u16capstatus & 0x0004) == 0x0004) ui32NoteVal = 0xFFC00000;
	else if ( (u16capstatus & 0x0008) == 0x0008) ui32NoteVal = 0xFFE00000;
	else if ( (u16capstatus & 0x0010) == 0x0010) ui32NoteVal = 0x00000000;
	else if ( (u16capstatus & 0x0020) == 0x0020) ui32NoteVal = 0x00200000;
	else if ( (u16capstatus & 0x0040) == 0x0040) ui32NoteVal = 0x00400000;
	else if ( (u16capstatus & 0x0080) == 0x0080) ui32NoteVal = 0x00600000;
	else if ( (u16capstatus & 0x0100) == 0x0100) ui32NoteVal = 0x00800000;
	else if ( (u16capstatus & 0x0200) == 0x0200) ui32NoteVal = 0x00A00000;
	else if ( (u16capstatus & 0x0400) == 0x0400) ui32NoteVal = 0x00C00000;
	else if ( (u16capstatus & 0x0800) == 0x0800) ui32NoteVal = 0x00E00000;
	else if ( (u16capstatus         ) == 0     ) ui32NoteVal = 0xDEAD;
	else                                    ui32NoteVal = u16capstatus;
	
	return ui32NoteVal;
}

void setup(void) {
	LinkTxRxBuffers();
	out1 = 0xABBA;
	
	rxbuf[0] = 0;	
	txbuf[0] = 0; // CAP1188_PRODID;

	uint8_t ui8ProdID = 0;
	uint8_t ui8ManuID = 0;
	uint8_t ui8Rev    = 0;
	bool bCorrectBoard = false;

	WriteMPR121Register(MPR121_SOFTRESET, 0x63);
	WriteMPR121Register(MPR121_ECR, 0x0);

	uint8_t c = ReadMPR121Register8(MPR121_CONFIG2);
	if (c != 0x24)  out1 = 0x4444;
		
	//SetMPR121Threshold(12, 6);
	
	SetMPR121Threshold(12, 6);


	WriteMPR121Register(MPR121_MHDR, 0x01);
	WriteMPR121Register(MPR121_NHDR, 0x01);
	WriteMPR121Register(MPR121_NCLR, 0x0E);
	WriteMPR121Register(MPR121_FDLR, 0x00);

	WriteMPR121Register(MPR121_MHDF, 0x01);
	WriteMPR121Register(MPR121_NHDF, 0x05);
	WriteMPR121Register(MPR121_NCLF, 0x01);
	WriteMPR121Register(MPR121_FDLF, 0x00);
	
	WriteMPR121Register(MPR121_NHDT, 0x00);
	WriteMPR121Register(MPR121_NCLT, 0x00);
	WriteMPR121Register(MPR121_FDLT, 0x00);
	
	WriteMPR121Register(MPR121_DEBOUNCE, 0);
	WriteMPR121Register(MPR121_CONFIG1, 0x10); // default, 16uA charge current
	WriteMPR121Register(MPR121_CONFIG2, 0x20); // 0.5uS encoding, 1ms period
	
	WriteMPR121Register(MPR121_ECR, 0x8F);  // start with first 5 bits of baseline tracking

	//out2 = ReadMPR121Register8(MPR121_CONFIG2); // Remove this. I'm using it for shitty debugging
	//return true;

	//out1 = 0xBEEF;
	out2 = 4;

	

}
void loop(void)
{
	//out1 = 0xAA55;
	//out2 = ReadMPR121Register8(MPR121_CONFIG2);
	//out1 = out1;
	out2 = MPR121Touched();
	if (out2 == 0xDEAD) out1 = 0; else out1 = 0x2000000;;
	//out2 = ReadMPR121Register16(MPR121_TOUCHSTATUS_L);
	//out2 = ReadMPR121Register8(MPR121_TOUCHSTATUS_L);//MPR121Touched();//Cap1188Touched();
	//out1 = 0xBBBB;
	/*
	
	
	
	if (out2 != 0)
	{
		out1 = 0x00200000;
	}
	else
	{
		out1 = 0;
	}
	*/
}]]></sText>
         </text>
      </attribs>
   </obj>
   <obj type="disp/dial b" sha="5d4fe09e04ac9d02b2f3224e493c9536fe25fa66" uuid="9ffed04e6a3052d9001eda83bae7024cb6d17037" name="dial_2" x="252" y="84">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/note" sha="47a060e4a7fa766d1de9cf03c8aa236d79be3440" uuid="ce3190ad98b73b468f22221f555b01feee03226a" name="note_1" x="252" y="168">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/hex" sha="e21d1bcdfadc4f2009b547d002484bede0762978" uuid="87617898f70d90033f8add921438bf0d11721fdd" name="hex_2" x="252" y="224">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/i" sha="e98a25a12afc62efc1991c3bb5290ccdf7214102" uuid="5e35fd0c62d81e70017289250cf28edd26e19e4a" name="i_1" x="252" y="280">
      <params/>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" sha="501c30e07dedf3d701e8d0b33c3c234908c3388e" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_3" x="1064" y="294">
      <params>
         <frac32.u.map name="value" value="64.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/-" sha="50b9299d5a370749aa9d6cfdb949bf3191a1f68" uuid="3280bb759e9fc189e134300e48dda7e903c9a110" name="-_1" x="1134" y="350">
      <params/>
      <attribs/>
   </obj>
   <obj type="osc/sine" sha="edec4a9d5f533ea748cd564ce8c69673dd78742f" uuid="6e094045cca76a9dbf7ebfa72e44e4700d2b3ba" name="sine_1" x="770" y="392">
      <params>
         <frac32.s.map name="pitch" value="2.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="gpio/in/analog" sha="e3ff2158ab5c372cfc7d9dddc5d64d55cd90c257" uuid="1c0c845ed2d7e06ae5f377ba13d9d09f4747ac87" name="analog_1" x="994" y="392">
      <params/>
      <attribs>
         <combo attributeName="channel" selection="PC0 (ADC1_IN10)"/>
      </attribs>
   </obj>
   <obj type="mix/mix 2" sha="f5582f4fce1b25a668f1f5dead41cccf09e4e7be" uuid="30c04239c88e09d3fa5c333b784ecf54f1b0e268" name="mix_2" x="896" y="434">
      <params>
         <frac32.u.map name="gain1" value="35.0"/>
         <frac32.u.map name="gain2" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/*" sha="15b8ed7ee3ac22eae7e9b5bda4a1d1b7dbd9ba58" uuid="3ac307b9f782049739ed62504081b96d580ea336" name="*_1" x="1148" y="448">
      <params/>
      <attribs/>
   </obj>
   <obj type="audio/out left" sha="63a81542ba731f54cb620e2404adb2dd7b742c1e" uuid="b11a3c09b2fdd575ea8212f2ce7743d5269253b1" name="out_1" x="1232" y="448">
      <params/>
      <attribs/>
   </obj>
   <obj type="osc/sine" sha="edec4a9d5f533ea748cd564ce8c69673dd78742f" uuid="6e094045cca76a9dbf7ebfa72e44e4700d2b3ba" name="sine_2" x="770" y="518">
      <params>
         <frac32.s.map name="pitch" value="2.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="audio/out right" sha="dbc48d941904b6914bc54f7b80fcd592eaad4853" uuid="e58a4cbbb087052c5480366e3f5d3a04aa319777" name="out_2" x="1232" y="546">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/hex" sha="e21d1bcdfadc4f2009b547d002484bede0762978" uuid="87617898f70d90033f8add921438bf0d11721fdd" name="hex_3" x="140" y="588">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/note" sha="47a060e4a7fa766d1de9cf03c8aa236d79be3440" uuid="ce3190ad98b73b468f22221f555b01feee03226a" name="note_2" x="140" y="658">
      <params/>
      <attribs/>
   </obj>
   <obj type="midi/in/keyb" sha="d2b06e818348b14523c68fd021077192860093c0" uuid="53b04874696932f38aceaa168bd5d9efb743716d" name="keyb_1" x="14" y="686">
      <params/>
      <attribs/>
   </obj>
   <nets>
      <net>
         <source obj="square_1" outlet="wave"/>
         <dest obj="script2_1" inlet="in1_"/>
      </net>
      <net>
         <source obj="sine_1" outlet="wave"/>
         <dest obj="mix_2" inlet="in1"/>
      </net>
      <net>
         <source obj="keyb_1" outlet="note"/>
         <dest obj="sine_2" inlet="pitch"/>
         <dest obj="hex_3" inlet="in"/>
         <dest obj="note_2" inlet="in"/>
      </net>
      <net>
         <source obj="sine_2" outlet="wave"/>
         <dest obj="mix_2" inlet="in2"/>
      </net>
      <net>
         <source obj="*_1" outlet="result"/>
         <dest obj="out_1" inlet="wave"/>
         <dest obj="out_2" inlet="wave"/>
      </net>
      <net>
         <source obj="mix_2" outlet="out"/>
         <dest obj="*_1" inlet="b"/>
      </net>
      <net>
         <source obj="analog_1" outlet="out"/>
         <dest obj="-_1" inlet="in2"/>
      </net>
      <net>
         <source obj="dial_3" outlet="out"/>
         <dest obj="-_1" inlet="in1"/>
      </net>
      <net>
         <source obj="-_1" outlet="out"/>
         <dest obj="*_1" inlet="a"/>
      </net>
      <net>
         <source obj="script2_1" outlet="out1_"/>
         <dest obj="hex_1" inlet="in"/>
      </net>
      <net>
         <source obj="script2_1" outlet="out2_"/>
         <dest obj="hex_2" inlet="in"/>
         <dest obj="note_1" inlet="in"/>
         <dest obj="dial_2" inlet="in"/>
         <dest obj="sine_1" inlet="pitch"/>
         <dest obj="i_1" inlet="in"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>-1549</x>
      <y>65</y>
      <width>1390</width>
      <height>1001</height>
   </windowPos>
</patch-1.0>